// #Loyalty
context Loyalty is {
  adaptor FromPayment from context Restaurant.Payments is {
    handler payments is {
      on event Restaurant.Payments.Paid  {
        "when event Paid from Payment context occurs"
        "and customer is known in the Paid event"
        "and customer has a loyalty account"
        "then"
          tell command AccruePoints to entity Loyalty
      }
    }
  } with { described as "Adapts loyalty rewards from payments" }
  type AccruePoints is command {
    when is TimeStamp,
    loyaltyAccountId is LoyaltyId,
    pointsAccrued is Number,
    fromOrder is OrderId?
  } with { explained as {
    |A command that, when received by the Loyalty account, accrues the `pointsAccrued`
    |number of points to the `loyaltyAccount` provided. Optionally, the order that
    |generated this
    |that can be redeemed in the future.
  }}
  type PointsAccrued is event {
    when is TimeStamp,
    loyaltyId is LoyaltyId,
    pointsAccrued is Number
  } with { explained as {
    |An event that is issued whenever points are accrued.
    |The event indicates `when` the accrual occurred, the loyalty account it
    |accrued to, and the number of `pointsAccrued`.
  }}

  type RedeemPoints is command {
    ???
  } with { explained as "This needs some work" }

  type PointsRedeemed is event {
    when is TimeStamp,
    customerId is CustomerId,
    pointsAwarded is Number,
    toOrder is OrderId
  } with { explained as {
  |This event occurs when the customer redeems their accrued points.
  }}
  type LoyaltyEvent is one of { PointsAccrued or PointsRedeemed } with { explained as {
    |This is a type alternation of the events for the LoyaltyAccount entity
  }}

  entity LoyaltyAccount is {
    type InitialStateData is { id is LoyaltyId }
    state InitialState of LoyaltyAccount.InitialStateData with {
      explained as {
        |This state type contains the state values associated with the loyalty
        |account when it is first created. It only contains the `LoyaltyId` value
        |that uniquely identifies the account.
      }
    }
    handler foo is { ??? }
    record ActiveStateData is {
      id is LoyaltyId,
      customer is CustomerId,
      points is Number,
      accrualRate is Real,
      redemptionRate is Real
    }
    state ActiveState of LoyaltyAccount.ActiveStateData with {
      explained as {
        |This state type used when a loyalty account is active
      }
    }

    handler Inputs is {
      ???
    }
  }
} with { explained as {
| This Loyalty bounded context keeps track of reward points for customer
| loyalty. Each customer is assigned a loyalty number and we track their
| points and usage. Loyalty points are redeemable for meals and other
| purchases at restaurants but not redeemable in cash.
}}
// #Loyalty
