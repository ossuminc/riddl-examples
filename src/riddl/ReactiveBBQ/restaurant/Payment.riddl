context Payment is {
    type PaymentKind = any of { CreditCard, DebitCard, Cash, BitCoin, Hours }

    type Pay = command {
      orderId is OrderId,
      amount is Number,
      tip is Number,
      kind is PaymentKind,
      when is TimeStamp
    }

    type Paid = event {
      orderId is OrderId,
      amount is Number,
      tip is Number,
      kind is PaymentKind
    }

  entity Payment is {
    option is aggregate
    type PaymentStateValue is {
        orderId is OrderId,
        orderAmount is Number,
        tipAmount is Number?,
        cardToken is String?,
        customerId is CustomerId?
    }
    state PaymentState of type Payment.PaymentStateValue
    handler foo is { ??? }
  }
} with { explained as {
| The Payment bounded context deals with receiving payments from customers for their orders.
}}
